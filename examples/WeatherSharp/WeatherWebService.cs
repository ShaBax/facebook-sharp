// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Mono Web Services Description Language Utility
//


/// <remarks/>
/// <remarks>
///Get one week weather forecast for valid zip code or Place name in USA
///</remarks>
[System.Web.Services.WebServiceBinding(Name="WeatherForecastSoap", Namespace="http://www.webservicex.net")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public class WeatherForecast : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    public WeatherForecast() {
        this.Url = "http://www.webservicex.net/WeatherForecast.asmx";
    }
    
    /// <remarks>
///Get one week weather forecast for a valid Zip Code(USA)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webservicex.net/GetWeatherByZipCode", RequestNamespace="http://www.webservicex.net", ResponseNamespace="http://www.webservicex.net", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public WeatherForecasts GetWeatherByZipCode(string ZipCode) {
        object[] results = this.Invoke("GetWeatherByZipCode", new object[] {
            ZipCode});
        return ((WeatherForecasts)(results[0]));
    }
    
    public System.IAsyncResult BeginGetWeatherByZipCode(string ZipCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetWeatherByZipCode", new object[] {
            ZipCode}, callback, asyncState);
    }
    
    public WeatherForecasts EndGetWeatherByZipCode(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WeatherForecasts)(results[0]));
    }
    
    /// <remarks>
///Get one week  weather forecast for a place name(USA)
///</remarks>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webservicex.net/GetWeatherByPlaceName", RequestNamespace="http://www.webservicex.net", ResponseNamespace="http://www.webservicex.net", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public WeatherForecasts GetWeatherByPlaceName(string PlaceName) {
        object[] results = this.Invoke("GetWeatherByPlaceName", new object[] {
            PlaceName});
        return ((WeatherForecasts)(results[0]));
    }
    
    public System.IAsyncResult BeginGetWeatherByPlaceName(string PlaceName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetWeatherByPlaceName", new object[] {
            PlaceName}, callback, asyncState);
    }
    
    public WeatherForecasts EndGetWeatherByPlaceName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((WeatherForecasts)(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.webservicex.net")]
public class WeatherForecasts {
    
    /// <remarks/>
    public System.Single Latitude;
    
    /// <remarks/>
    public System.Single Longitude;
    
    /// <remarks/>
    public System.Single AllocationFactor;
    
    /// <remarks/>
    public string FipsCode;
    
    /// <remarks/>
    public string PlaceName;
    
    /// <remarks/>
    public string StateCode;
    
    /// <remarks/>
    public string Status;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
    public WeatherData[] Details;
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.webservicex.net")]
public class WeatherData {
    
    /// <remarks/>
    public string Day;
    
    /// <remarks/>
    public string WeatherImage;
    
    /// <remarks/>
    public string MaxTemperatureF;
    
    /// <remarks/>
    public string MinTemperatureF;
    
    /// <remarks/>
    public string MaxTemperatureC;
    
    /// <remarks/>
    public string MinTemperatureC;
}
